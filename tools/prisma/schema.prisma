generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Provider {
  email
  github
  google
}

enum Visibility {
  public
  private
}

enum Type {
  technical
  behavioral
  combination
}

enum Language {
  VN
  EN
  KR
}

model User {
  id               String   @id @default(cuid())
  name             String
  picture          String?
  username         String   @unique
  email            String   @unique
  locale           String   @default("en-US")
  emailVerified    Boolean  @default(false)
  twoFactorEnabled Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  provider         Provider
  secrets          Secrets?
  resumes          Resume[]
  interviews       Interviews[]
  jobApplications Json @default("[]")
}

model Secrets {
  id                   String   @id @default(cuid())
  password             String?
  lastSignedIn         DateTime @default(now())
  verificationToken    String?
  twoFactorSecret      String?
  twoFactorBackupCodes String[] @default([])
  refreshToken         String?
  resetToken           String?  @unique
  userId               String   @unique
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, id])
}

model Resume {
  id         String      @id @default(cuid())
  title      String
  slug       String
  data       Json        @default("{}")
  visibility Visibility  @default(private)
  locked     Boolean     @default(false)
  statistics Statistics?
  userId     String
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@unique([userId, id])
  @@unique([userId, slug])
  @@index(fields: [userId])
}

model Statistics {
  id        String   @id @default(cuid())
  views     Int      @default(0)
  downloads Int      @default(0)
  resumeId  String   @unique
  resume    Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([resumeId, id])
}

model Interviews {
  id        String   @id @default(cuid())
  position  String    
  type      Type     @default(combination)
  jd        String
  content   Json     @default("{}")
  language  Language @default(EN)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  model     String   @default("gemini-pro-0125")
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  cv        Json     @default("{}")
  accuracyRate Int   @default(0)
  communication Int  @default(0)
  responseRate Int   @default(0)
  totalScore Int     @default(0)
  feedback  String   @default("")
  interviewer String  @default("andrew")

  @@unique([userId, id])
  @@index(fields: [userId])
}